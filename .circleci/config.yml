# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  # Build Job
  build:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
  test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
  test-api:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: QA API test
          command: "echo Running API tests"
  scan:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Source code Scan
          command: "echo Source code scan"
  deploy-qa:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on QA
          command: Deploying on QA
  deploy-dev:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on DEV
          command: Deploying on DEV
  deploy-pre-prod:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on PRE-PROD
          command: Deploying on PRE-PROD
  deploy-prod:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on PROD
          command: Deploying on PROD

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample_pipeline: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
      - scan
      - test:
          requires:
            - build
            - scan
      - deploy-qa:
          requires:
            - test
      - deploy-dev:
          filters:
              branches:
                only: dev
          type: approval
          requires:
            - test
      - deploy-pre-prod:
          filters:
              branches:
                only: stage
          type: approval
          requires:
            - test
      - deploy-prod:
          filters:
              branches:
                only: master
              tags:
                only: /^v*/
          type: approval
          requires:
            - test-api
      - test-api:
          requires:
            - deploy-qa
