# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  # Build Job
  build_scan:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      - run:
          name: Install
          command: mvn clean install
      - run:
          name: Scan
          command: mvn snyk:test
  test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
  test-api:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: QA API test
          command: "echo Running API tests"
  test-regression:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: QA API test
          command: "echo Running Regression tests"
  test-acceptance:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: QA API test
          command: "echo Running Acceptance tests"
  deploy-qa:
    working_directory: /tmp
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on QA
          command: "echo Deploying on QA"
      - run:
          name: Creating QA Artifacts
          command: |
            echo "*_qa.jar file" > /tmp/art-1;
            mkdir /tmp/artifacts;
            echo "Maven Artifact files in a dir" > /tmp/artifacts/art-2;
      - store_artifacts:
          path: /tmp/art-1
          destination: artifact-file
      - store_artifacts:
          path: /tmp/artifacts
  deploy-dev:
    working_directory: /tmp
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on DEV
          command: "echo Deploying on DEV"
      - run:
          name: Creating DEV Artifacts
          command: |
            echo "*_dev.jar file" > /tmp/art-1;
            mkdir /tmp/artifacts;
            echo "Maven Artifact files in a dir" > /tmp/artifacts/art-2;
      - store_artifacts:
          path: /tmp/art-1
          destination: artifact-file
      - store_artifacts:
          path: /tmp/artifacts
  deploy-pre-prod:
    working_directory: /tmp
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on PRE-PROD
          command: "echo Deploying on PRE-PROD"
      - run:
          name: Creating PRE-PROD Artifacts
          command: |
            echo "*_pre_prod.jar file" > /tmp/art-1;
            mkdir /tmp/artifacts;
            echo "Maven Artifact files in a dir" > /tmp/artifacts/art-2;
      - store_artifacts:
          path: /tmp/art-1
          destination: artifact-file
      - store_artifacts:
          path: /tmp/artifacts
  deploy-prod:
    working_directory: /tmp
    docker:
      - image: cimg/openjdk:11.0
    steps:
      #- checkout
      - run:
          name: Deploy on PROD
          command: "echo Deploying on PROD"
      - run:
          name: Creating PROD Artifacts
          command: |
            echo "*_prod.jar file" > /tmp/art-1;
            mkdir /tmp/artifacts;
            echo "Maven Artifact files in a dir" > /tmp/artifacts/art-2;
      - store_artifacts:
          path: /tmp/art-1
          destination: artifact-file
      - store_artifacts:
          path: /tmp/artifacts
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample_pipeline: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build_scan
      - test:
          requires:
            - build_scan
      - deploy-qa-approval:
          type: approval
          requires:
            - test
      - deploy-qa:
          requires:
            - deploy-qa-approval
      - deploy-dev-approval:
          type: approval
          requires:
            - test-api
            - test-regression
            - test-acceptance
          filters:
              branches:
                only: dev
      - deploy-dev:
          filters:
              branches:
                only: dev
          requires:
            - deploy-dev-approval
      - deploy-pre-prod-approval:
          type: approval
          requires:
            - test-api
            - test-regression
            - test-acceptance
          filters:
              branches:
                only: stage
      - deploy-pre-prod:
          filters:
              branches:
                only: stage
          requires:
            - deploy-pre-prod-approval
      - deploy-prod-approval:
          type: approval
          requires:
            - test-api
            - test-regression
            - test-acceptance
          filters:
              branches:
                only: master
              tags:
                only: /^v*/
      - deploy-prod:
          filters:
              branches:
                only: master
              tags:
                only: /^v*/
          requires:
            - deploy-prod-approval
      - test-api:
          requires:
            - deploy-qa
      - test-regression:
          requires:
            - deploy-qa
      - test-acceptance:
          requires:
            - deploy-qa
